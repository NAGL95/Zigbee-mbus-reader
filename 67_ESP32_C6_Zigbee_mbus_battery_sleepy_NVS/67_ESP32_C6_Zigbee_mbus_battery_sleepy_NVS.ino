//66_ESP32_C6_Zigbee.ino
#include <Arduino.h>
#include <ESP.h>
#include <MBusinoLib.h>
#include <ArduinoJson.h>
#include <Battery18650Stats.h>

#include <esp_adc/adc_cali.h>
#include <esp_adc/adc_cali_scheme.h>
#include <driver/adc.h> // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª


#include "Zigbee.h"
#include "zigbee_mbus_sensor.h"

#ifndef ZIGBEE_MODE_ED
#error "Zigbee end device mode is not selected in Tools->Zigbee mode"
#endif

extern ZigbeeMBusSensor zbMBusSensor;

#define uS_TO_S_FACTOR 1000000ULL /* Conversion factor for micro seconds to seconds */
#define TIME_TO_SLEEP  43200         /* Sleep for 55s will + 5s delay for establishing connection => data reported every 1 minute */

#define ADC_PIN 0 
#define CONVERSION_FACTOR 2.05
#define READS 10 
Battery18650Stats battery(ADC_PIN, CONVERSION_FACTOR, READS);

//--------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ UART-----------------------------------------------------------------------
#define RXD 20             // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∏–Ω RX –¥–ª—è –ø–ª–∞—Ç—ã RS485 HW-0519
#define TXD 21             // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∏–Ω TX –¥–ª—è –ø–ª–∞—Ç—ã RS485 HW-0519
#define MBUS_ADDRES 0x88    // –ê–¥—Ä–µ—Å M-Bus —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
#define START_ADDRESS 0x0C  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏—Ç —Å –∫–æ—Ç–æ—Ä–æ–≥–æ

unsigned long timerMbus = 0;
const unsigned long requestInterval = 10000;

//--------------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∏–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏–µ–º HW-0519--------------------------------
#define DC_DC_PIN 1                                                    //–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø—Ç–æ–ø–∞—Ä–æ–π (–æ–ø—Ç–æ–ø–∞—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –ª–∏–Ω–∏–∏–∏ GND)
//--------------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∏–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DC-DC –º–æ–¥—É–ª–µ–º MT3608-----------------------------
#define HW_0519_PIN 2                                                        //–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ–ø—Ç–æ–ø–∞—Ä–æ–π (–æ–ø—Ç–æ–ø–∞—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –ª–∏–Ω–∏–∏–∏ GND)
// ------------------------------------- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–∏–Ω–æ–≤ --------------------------------

const int pinsInitial[] = {LED_BUILTIN, 15, 16, 17};
const int pinsCountInitial = sizeof(pinsInitial) / sizeof(pinsInitial[0]);

const int pinsPheripirals[] = {DC_DC_PIN, HW_0519_PIN};
const int pinsCountPheripirals = sizeof(pinsPheripirals) / sizeof(pinsPheripirals[0]);

// ------------------------------------- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–Ω—É -----------------------------------------

// ------ –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è M-BUS —Ç–µ–ª–µ–≥—Ä–∞–º–º ------ 
void decodeMBusData() {

  byte buffer[512] = { 0 };
  int index = 0;
  unsigned long timeout = millis() + 5000;  // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
  int packet_size = buffer[1] + 6;
  // 1. –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  while (millis() < timeout && index < sizeof(buffer)) {
    if (Serial1.available()) {
      buffer[index++] = Serial1.read();
      delayMicroseconds(500);
      timeout = millis() + 5000;  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    }
  }

 /*// 2. –í—ã–≤–æ–¥ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Serial.printf("\nüì® –ü–æ–ª—É—á–µ–Ω–æ %d –±–∞–π—Ç:\n", index);
  for (int i = 0; i < index; i++) {
    Serial.printf("%02X ", buffer[i]);
    if ((i + 1) % 16 == 0) Serial.println();
  }
  Serial.println("\n");

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º—ã
  if (index < 10) {
    Serial.println("‚ùå –û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞–∫–µ—Ç");
    return;
  }*/

  // 4. –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  MBusinoLib decoder(254);
  DynamicJsonDocument jsonDoc(2048);
  JsonArray root = jsonDoc.to<JsonArray>();
  const int headerSize = 9;
  int dataLen = index - headerSize - 2; // minus checksum and end byte
  if (dataLen <= 0) {
    Serial.println("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞.");
  return;
  }

//  Serial.printf("üì¶ –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ %d, –¥–ª–∏–Ω–∞ %d\n", headerSize, dataLen);
  uint8_t fields = decoder.decode(&buffer[headerSize], dataLen, root);

  if (fields == 0) {
    Serial.println("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è M-Bus!");
    return;
  }

  // 5. –í—ã–≤–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º—ã
//  Serial.println("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è:");
//  serializeJsonPretty(root, Serial);
//  Serial.println("\n");
  
  // 6.–ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
  DynamicJsonDocument doc(1024);

  for (uint8_t k = 0; k < fields; k++) {
    JsonObject field = root[k];
    uint8_t storage = field["storage"] | 0;
    const char* name = field["name"].as<const char*>();
    double value = field["value_scaled"].as<double>();
    uint8_t code = field["code"].as<uint8_t>();
    uint8_t vif = strtoul(field["vif"].as<String>().c_str() + 2, NULL, 16);  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è hex —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
    uint8_t subUnit = field.containsKey("subUnit") ? field["subUnit"].as<uint8_t>() : 0;
    const char* unit = field["units"].as<const char*>();

    // 6.1.–ü–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –±–∞–π—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
    int byteIndex = field.containsKey("byte_position") ? field["byte_position"].as<int>() : -1;
//    Serial.printf("üõ† –ü—Ä–æ–≤–µ—Ä–∫–∞: name=%s, vif=0x%02X, byteIndex=%d, value=%.2f\n",
//                  name, vif, byteIndex, value);

    //  6.2.–§–∏–∫—Å–∞—Ü–∏—è mbus_heat_sum (Heat SUM) –∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ kWh –≤ Gcal 
    if (strcmp(name, "energy") == 0 &&  value > 100000) {
      
      Serial.println("üî• –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ mbus_heat_sum_Wh!");
      float heat_sum_Wh = value;
      float heat_sum_Gcal = heat_sum_Wh*0.00000085985;
      doc["mbus_heat_sum_Gcal"] = heat_sum_Gcal;  //
      Serial.printf("  ‚úÖ Heat: %.3f\n", heat_sum_Gcal);
      uint8_t dp = 3;
      zbMBusSensor.updateSummationDeliveredWithFormatting(heat_sum_Gcal, dp);
      //Serial.printf("[AUTO] –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ decodeMBusData: %.3f\n", heat_sum_Gcal);

      /*float heat_sum_Gcal = heat_sum_Wh * 0.00000000086;
      doc["mbus_heat_sum_Gcal"] = heat_sum_Gcal;
      Serial.printf("  ‚úÖ Heat: %.3f\n", heat_sum_Gcal);*/

    } else if (strcmp(name, "energy") == 0 && vif && value <= 100000) {
      continue;
    }

    //  6.3.–§–∏–∫—Å–∞—Ü–∏—è mbus_volume_sum (Volume)                     // –°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä—ë–º –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã –º3
    if (strcmp(name, "volume") == 0 && vif == 0x14) {
      doc["mbus_volume_sum"] = value;
      float volume_sum = value;
      Serial.printf("  ‚úÖ Volume: %.3f\n", volume_sum);
//      zbMBusSensor.updateFlowMeasuredValue(volume_sum);
    } 
    else if ((vif == 0x14) && value <= 0) {
      continue;
    }

    //  6.4.–§–∏–∫—Å–∞—Ü–∏—è mbus_power (Power)                           // –ü–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–µ —Ç–µ–ø–ª–æ –í–∞—Ç—Ç
    if (strcmp(name, "power") == 0 && vif == 0x2C) {
      doc["mbus_power"] = value;
      float power = value;
      Serial.printf("  ‚úÖ Power: %.3f\n", power);
    }

    //  6.5.–§–∏–∫—Å–∞—Ü–∏—è mbus_volume_flow
    if (strcmp(name, "volume_flow") == 0 && vif == 0x3b) {  // –¢–µ–∫—É—â–∏–π(–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π) –æ–±—ä–µ–º
      doc["mbus_volume_flow"] = value;
      //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!// TO-DO
    } else if ((vif == 0x3b) && value <= 0) {
      continue;
    }

    //  6.6.–§–∏–∫—Å–∞—Ü–∏—è mbus_flow_temerature
    if (strcmp(name, "flow_temperature") == 0) {  // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—Ç–æ–∫–∞
      doc["mbus_temp_flow"] = value;
      float tFlow = value;
      Serial.printf("  ‚úÖ FlowTemp: %.3f\n", tFlow);
//      zbMBusSensor.updateFlowTemperature(tFlow);
    } else if (strcmp(name, "flow_temperature") && value <= 0) {
      continue;
    }

    //  6.7.–§–∏–∫—Å–∞—Ü–∏—è mbus_return_temerature
    if (strcmp(name, "return_temperature") == 0) {  // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–±—Ä–∞—Ç–∫–∏
      doc["mbus_temp_return"] = value;
      float tReturn = value;
      Serial.printf("  ‚úÖ ReturnTemp: %.3f\n", tReturn);
//      zbMBusSensor.updateReturnTemperature(tReturn);
    } else if (strcmp(name, "return_temperature") == 0 && value <= 0) {
      continue;
    }


  }

  // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

  //char jsonPayload[1024];
  //serializeJson(doc, jsonPayload);

  //Serial.println("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
  //serializeJsonPretty(doc, Serial);
  //Serial.println("\n-------------------------------------");

  Serial1.flush();
}

// ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ M-Bus –∑–∞–ø—Ä–æ—Å–∞ -----------------
void sendREQ_UD2(uint8_t addres) {
  byte frame[] = { 0x10, 0x5B, addres, (byte)(0x5B + addres), 0x16 };  //{0x10, 0x5B, addres, (byte)(0x5B + addres), 0x16};
  Serial1.write(frame, sizeof(frame));
  Serial.println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å REQ_UD2");
}

// ---------- –†—É—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ -------------------- 
void checkSerialReboot() {  //–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ESP32 —á–µ—Ä–µ–∑ Serial Monitor + –≤–∫–ª./–≤—ã–∫–ª. DC-DC
  while (Serial.available() > 0) {
    char input = Serial.read();
    if (input == 'r' || input == 'R') {
      Serial.println("\nüîÉ –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ESP32!");
      delay(1000);    // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      ESP.restart();  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    }
    
    if (input == 'dc_pin_on') {
        digitalWrite(DC_DC_PIN, HIGH); // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HIGH
        Serial.println("DC pin ON");
        }
    
    if (input == 'dc_pin_off') {
        digitalWrite(DC_DC_PIN, LOW); // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LOW
        Serial.println("DC pin OFF");
      }
  }
}

void prepareForSleep(){
  delay(20000);

  for (int p=0; p < pinsCountPheripirals; p++) {
    pinMode(pinsPheripirals[p], OUTPUT);
    digitalWrite(pinsPheripirals[p], LOW);
  }

  Serial1.end();
  Serial.end();
  
  esp_deep_sleep_start();
}

// ---------- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----------------------
void setup() {
  //–ó–∞–ø—É—Å–∫ Serial –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  Serial.begin(115200);

  for (int i = 0; i < pinsCountInitial; i++) {
    pinMode(pinsInitial[i], OUTPUT);
    digitalWrite(pinsInitial[i], LOW);
  }
  
  for (int p = 0; p < pinsCountPheripirals; p++) {
    pinMode(pinsPheripirals[p], OUTPUT);
    digitalWrite(pinsPheripirals[p], HIGH);
  }

  // Configure the wake up source and set to wake up every 5 seconds
  esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);

  //–ó–∞–ø—É—Å–∫ Serial1 –¥–ª—è —á—Ç–µ–Ω–∏—è MBus
  Serial1.begin(2400, SERIAL_8E1, RXD, TXD);
  
  //–ó–∞–ø—É—Å–∫ Zigbee
  initZigbeeMBusSensor();
   
  Serial.println("Starting Zigbee...");
  // When all EPs are registered, start Zigbee in End Device mode
  if (!Zigbee.begin()) {
    Serial.println("Zigbee failed to start!");
    Serial.println("Rebooting...");
    ESP.restart();
  } else {
    Serial.println("Zigbee started successfully!");
  }
  Serial.println("Connecting to network");
  while (!Zigbee.connected()) {
    Serial.print(".");
    delay(100);
  }
  Serial.println();

  Serial.print("Volts: ");
  Serial.println(battery.getBatteryVolts());

  Serial.print("Charge level: ");
  Serial.println(battery.getBatteryChargeLevel());

  Serial.print("Charge level (using the reference table): "); 
  Serial.println(battery.getBatteryChargeLevel(true));
  
  zbMBusSensor.updateMainVoltage(battery.getBatteryVolts());
}

void loop() {
  checkSerialReboot();
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ M-Bus
  if (millis() - timerMbus > requestInterval) {
    timerMbus = millis();
    sendREQ_UD2(MBUS_ADDRES);
    delay(2000);
    decodeMBusData();   

    prepareForSleep();  
  }
}